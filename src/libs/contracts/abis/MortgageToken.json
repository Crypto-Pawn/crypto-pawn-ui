{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cryptoPawnToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Mortgage",
          "name": "mortgage",
          "type": "tuple"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Mortgage",
          "name": "mortgage",
          "type": "tuple"
        }
      ],
      "name": "CreateLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Mortgage",
          "name": "mortgage",
          "type": "tuple"
        }
      ],
      "name": "Foreclose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Mortgage",
          "name": "mortgage",
          "type": "tuple"
        }
      ],
      "name": "Lend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Mortgage",
          "name": "mortgage",
          "type": "tuple"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mortgageId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoPawnToken",
      "outputs": [
        {
          "internalType": "contract ICryptoPawnToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mortgageId",
          "type": "uint256"
        }
      ],
      "name": "foreclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMortgages",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct Mortgage[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mortgageId",
          "type": "uint256"
        }
      ],
      "name": "getMortgage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct Mortgage",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getMortgagesByBorrower",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct Mortgage[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "getMortgagesByLender",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "enum MortgageState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct Mortgage[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mortgageId",
          "type": "uint256"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mortgageId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x082594d58687cf0de0dbfe662a2bf23205d6cdea30f0ba0d9408a2c4cdee062b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3359674",
    "logsBloom": "0x
    "blockHash": "0x2bae7de94ea862ea3186900ad3344ed0d32db9a758a360908142b5dd3bc7c0bb",
    "transactionHash": "0x082594d58687cf0de0dbfe662a2bf23205d6cdea30f0ba0d9408a2c4cdee062b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3359674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "be740b3f9d64434e9fe338b8880e8fca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptoPawnToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Mortgage\",\"name\":\"mortgage\",\"type\":\"tuple\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Mortgage\",\"name\":\"mortgage\",\"type\":\"tuple\"}],\"name\":\"CreateLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Mortgage\",\"name\":\"mortgage\",\"type\":\"tuple\"}],\"name\":\"Foreclose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Mortgage\",\"name\":\"mortgage\",\"type\":\"tuple\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Mortgage\",\"name\":\"mortgage\",\"type\":\"tuple\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mortgageId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoPawnToken\",\"outputs\":[{\"internalType\":\"contract ICryptoPawnToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mortgageId\",\"type\":\"uint256\"}],\"name\":\"foreclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMortgages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Mortgage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mortgageId\",\"type\":\"uint256\"}],\"name\":\"getMortgage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Mortgage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getMortgagesByBorrower\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Mortgage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"getMortgagesByLender\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"enum MortgageState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Mortgage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mortgageId\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mortgageId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MortgageToken.sol\":\"MortgageToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MortgageToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"./enums/MortgageState.sol\\\";\\nimport \\\"./interfaces/IMortgageToken.sol\\\";\\nimport \\\"./storages/MortgageStorage.sol\\\";\\nimport \\\"./storages/NFTStorage.sol\\\";\\nimport \\\"./storages/TokenStorage.sol\\\";\\nimport \\\"./utils/RepayInterestCalculator.sol\\\";\\n\\ncontract MortgageToken is\\n    IMortgageToken,\\n    MortgageStorage,\\n    TokenStorage,\\n    NFTStorage,\\n    RepayInterestCalculator\\n{\\n    constructor(address _cryptoPawnToken) TokenStorage(_cryptoPawnToken) {}\\n\\n    event CreateLoan(Mortgage mortgage);\\n    event Cancel(Mortgage mortgage);\\n    event Lend(Mortgage mortgage);\\n    event Repay(Mortgage mortgage);\\n    event Foreclose(Mortgage mortgage);\\n\\n    function createLoan(\\n        uint _nftTokenId,\\n        address _nftContract,\\n        uint _principal,\\n        uint _interest,\\n        uint _duration\\n    ) external override returns (uint) {\\n        require(_nftContract != address(0), \\\"Invalid contract address\\\");\\n\\n        require(_principal > 0, \\\"Principal must be greater than 0\\\");\\n        require(\\n            _principal <= 1000000,\\n            \\\"Principal must be less than or equal to 1 million\\\"\\n        );\\n\\n        require(_duration > 0, \\\"Duration must be greater than 0\\\");\\n        require(\\n            _duration <= 365,\\n            \\\"Duration must be less than or equal to 365 days\\\"\\n        );\\n        require(\\n            _interest <= 100,\\n            \\\"Interest must be less than or equal to 100%\\\"\\n        );\\n        require(_interest > 0, \\\"Interest must be greater than 0\\\");\\n\\n        mortgageId++;\\n        Mortgage memory mortgage = Mortgage(\\n            mortgageId,\\n            _nftTokenId,\\n            _principal,\\n            _interest,\\n            _duration,\\n            0,\\n            address(0),\\n            msg.sender,\\n            _nftContract,\\n            MortgageState.PENDING\\n        );\\n        mortgageIdToMortgage[mortgageId] = mortgage;\\n        emit CreateLoan(mortgage);\\n        return mortgageId;\\n    }\\n\\n    function cancel(uint _mortgageId) external override {\\n        require(\\n            mortgageIdToMortgage[_mortgageId].borrower == msg.sender,\\n            \\\"Not the borrower\\\"\\n        );\\n        require(\\n            mortgageIdToMortgage[_mortgageId].state == MortgageState.PENDING,\\n            \\\"Mortgage not in pending state\\\"\\n        );\\n        mortgageIdToMortgage[_mortgageId].state = MortgageState.CANCELLED;\\n        emit Cancel(mortgageIdToMortgage[_mortgageId]);\\n    }\\n\\n    function lend(uint _mortgageId) external override {\\n        require(\\n            mortgageIdToMortgage[_mortgageId].borrower != msg.sender,\\n            \\\"Borrower cannot be lender\\\"\\n        );\\n        require(\\n            mortgageIdToMortgage[_mortgageId].state == MortgageState.PENDING,\\n            \\\"Mortgage not in pending state\\\"\\n        );\\n        mortgageIdToMortgage[_mortgageId].lender = msg.sender;\\n        mortgageIdToMortgage[_mortgageId].state = MortgageState.SUPPLIED;\\n        mortgageIdToMortgage[_mortgageId].startTime = block.timestamp;\\n        _transferToken(\\n            msg.sender,\\n            mortgageIdToMortgage[_mortgageId].borrower,\\n            mortgageIdToMortgage[_mortgageId].principal\\n        );\\n        _depositNFT(\\n            _mortgageId,\\n            mortgageIdToMortgage[_mortgageId].nftContract,\\n            mortgageIdToMortgage[_mortgageId].nftTokenId,\\n            mortgageIdToMortgage[_mortgageId].borrower\\n        );\\n        emit Lend(mortgageIdToMortgage[_mortgageId]);\\n    }\\n\\n    function repay(uint _mortgageId) external override {\\n        require(\\n            mortgageIdToMortgage[_mortgageId].borrower == msg.sender,\\n            \\\"Not the borrower\\\"\\n        );\\n        require(\\n            mortgageIdToMortgage[_mortgageId].state == MortgageState.SUPPLIED,\\n            \\\"Mortgage not in supplied state\\\"\\n        );\\n        require(\\n            mortgageIdToMortgage[_mortgageId].startTime +\\n                mortgageIdToMortgage[_mortgageId].duration >=\\n                block.timestamp,\\n            \\\"Mortgage overdue\\\"\\n        );\\n\\n        // Use RepayInterestCalculator to calculate the repayment amount\\n        uint repaymentAmount = _calculateRepayAmount(\\n            mortgageIdToMortgage[_mortgageId].principal,\\n            mortgageIdToMortgage[_mortgageId].interest, // Convert to basis points\\n            mortgageIdToMortgage[_mortgageId].duration\\n        );\\n\\n        require(\\n            cryptoPawnToken.balanceOf(msg.sender) >= repaymentAmount,\\n            \\\"Insufficient funds for repayment\\\"\\n        );\\n\\n        require(\\n            cryptoPawnToken.allowance(msg.sender, address(this)) >=\\n                repaymentAmount,\\n            \\\"Insufficient allowance\\\"\\n        );\\n\\n        _transferToken(\\n            msg.sender,\\n            mortgageIdToMortgage[_mortgageId].lender,\\n            repaymentAmount\\n        );\\n\\n        _withdrawNFT(_mortgageId, msg.sender);\\n\\n        mortgageIdToMortgage[_mortgageId].state = MortgageState.REPAID;\\n        emit Repay(mortgageIdToMortgage[_mortgageId]);\\n    }\\n\\n    function foreclose(uint _mortgageId) external override {\\n        require(\\n            mortgageIdToMortgage[_mortgageId].lender == msg.sender,\\n            \\\"Not the lender\\\"\\n        );\\n\\n        require(\\n            (block.timestamp >=\\n                mortgageIdToMortgage[_mortgageId].startTime +\\n                    mortgageIdToMortgage[_mortgageId].duration) ||\\n                (mortgageIdToMortgage[_mortgageId].state ==\\n                    MortgageState.REPAID),\\n            \\\"Mortgage not overdue or already repaid\\\"\\n        );\\n\\n        _withdrawNFT(_mortgageId, msg.sender);\\n\\n        mortgageIdToMortgage[_mortgageId].state = MortgageState.FORECLOSED;\\n        emit Foreclose(mortgageIdToMortgage[_mortgageId]);\\n    }\\n\\n    function getMortgage(\\n        uint _mortgageId\\n    ) external view override returns (Mortgage memory) {\\n        return mortgageIdToMortgage[_mortgageId];\\n    }\\n\\n    function getMortgagesByLender(\\n        address _lender\\n    ) external view override returns (Mortgage[] memory) {\\n        uint count = 0;\\n        for (uint i = 1; i <= mortgageId; i++) {\\n            if (mortgageIdToMortgage[i].lender == _lender) {\\n                count++;\\n            }\\n        }\\n\\n        Mortgage[] memory mortgages = new Mortgage[](count);\\n        uint index = 0;\\n        for (uint i = 1; i <= mortgageId; i++) {\\n            if (mortgageIdToMortgage[i].lender == _lender) {\\n                mortgages[index] = mortgageIdToMortgage[i];\\n                index++;\\n            }\\n        }\\n        return mortgages;\\n    }\\n\\n    function getMortgagesByBorrower(\\n        address _borrower\\n    ) external view override returns (Mortgage[] memory) {\\n        uint count = 0;\\n        for (uint i = 1; i <= mortgageId; i++) {\\n            if (mortgageIdToMortgage[i].borrower == _borrower) {\\n                count++;\\n            }\\n        }\\n\\n        Mortgage[] memory mortgages = new Mortgage[](count);\\n        uint index = 0;\\n        for (uint i = 1; i <= mortgageId; i++) {\\n            if (mortgageIdToMortgage[i].borrower == _borrower) {\\n                mortgages[index] = mortgageIdToMortgage[i];\\n                index++;\\n            }\\n        }\\n        return mortgages;\\n    }\\n\\n    function getAllMortgages()\\n        external\\n        view\\n        override\\n        returns (Mortgage[] memory)\\n    {\\n        Mortgage[] memory mortgages = new Mortgage[](mortgageId);\\n        for (uint i = 1; i <= mortgageId; i++) {\\n            mortgages[i - 1] = mortgageIdToMortgage[i];\\n        }\\n        return mortgages;\\n    }\\n}\\n\",\"keccak256\":\"0xd67eca02b1c8e5b1374d2504a4a45982623a11d475f5084d0a6cc47bf8261922\",\"license\":\"MIT\"},\"contracts/enums/MortgageState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nenum MortgageState {\\n    PENDING,\\n    CANCELLED,\\n    SUPPLIED,\\n    REPAID,\\n    FORECLOSED\\n}\\n\",\"keccak256\":\"0x749f2fd5bcad996492ab2778c7cee947d9d5764677c9aa430f99c6d69a56c6cc\",\"license\":\"MIT\"},\"contracts/interfaces/ICryptoPawnToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\ninterface ICryptoPawnToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbca13512197cc0912960e8576ab764cb59441a339ad42e2dc1dc460eed594db7\",\"license\":\"MIT\"},\"contracts/interfaces/IMortgageToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"../structs/Mortgage.sol\\\";\\nimport \\\"../enums/MortgageState.sol\\\";\\n\\ninterface IMortgageToken {\\n    function createLoan(\\n        uint _nftTokenId,\\n        address _nftContract,\\n        uint _principal,\\n        uint _interest,\\n        uint _duration\\n    ) external returns (uint);\\n\\n    function cancel(uint _mortgageId) external;\\n\\n    function lend(uint _mortgageId) external;\\n\\n    function repay(uint _mortgageId) external;\\n\\n    function foreclose(uint _mortgageId) external;\\n\\n    function getMortgage(\\n        uint _mortgageId\\n    ) external view returns (Mortgage memory);\\n\\n    function getMortgagesByLender(\\n        address _lender\\n    ) external view returns (Mortgage[] memory);\\n\\n    function getMortgagesByBorrower(\\n        address _borrower\\n    ) external view returns (Mortgage[] memory);\\n\\n    function getAllMortgages() external view returns (Mortgage[] memory);\\n}\\n\",\"keccak256\":\"0xb8b7dad9ac68e5b3e79a8dacef48c2c41b8591d715ad18c3abf731227c6d017c\",\"license\":\"MIT\"},\"contracts/libraries/MulDiv.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary MulDiv {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            uint256 prod0;\\n            uint256 prod1;\\n\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            require(denominator > prod1);\\n\\n            uint256 remainder;\\n\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            uint256 twos = (~denominator + 1) & denominator;\\n\\n            assembly {\\n                denominator := div(denominator, twos)\\n                prod0 := div(prod0, twos)\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n            inv *= 2 - denominator * inv;\\n\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb8d2f7e44ea3db0b4f864de54388e48b3f8810382d7a39e1e7f30c89c45aea87\",\"license\":\"MIT\"},\"contracts/storages/MortgageStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"../structs/Mortgage.sol\\\";\\n\\ncontract MortgageStorage {\\n    uint mortgageId = 0;\\n    mapping(uint => Mortgage) mortgageIdToMortgage;\\n\\n    constructor() {}\\n}\\n\",\"keccak256\":\"0xd010ed13bf1b606d2c6a9a9a62478db85825c8502b4eb06242d56e5f6114a4e0\",\"license\":\"MIT\"},\"contracts/storages/NFTStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../structs/NFT.sol\\\";\\n\\ncontract NFTStorage is IERC721Receiver {\\n    constructor() {}\\n\\n    mapping(uint => NFT) storedNFTs;\\n\\n    event Deposited(address indexed from, address indexed nft, uint256 tokenId);\\n    event Withdrawn(address indexed to, address indexed nft, uint256 tokenId);\\n\\n    function _depositNFT(\\n        uint _mortgageId,\\n        address _nft,\\n        uint256 _tokenId,\\n        address _nftOwner\\n    ) internal {\\n        require(_mortgageId > 0, \\\"Invalid mortgage ID\\\");\\n        require(_nft != address(0), \\\"Invalid contract address\\\");\\n\\n        IERC721(_nft).safeTransferFrom(_nftOwner, address(this), _tokenId);\\n\\n        storedNFTs[_mortgageId] = NFT(_nft, _tokenId);\\n\\n        emit Deposited(_nftOwner, _nft, _tokenId);\\n    }\\n\\n    function _withdrawNFT(uint _mortgageId, address _to) internal {\\n        NFT memory nft = storedNFTs[_mortgageId];\\n        IERC721(nft.contractAddress).safeTransferFrom(\\n            address(this),\\n            _to,\\n            nft.tokenId\\n        );\\n        delete storedNFTs[_mortgageId];\\n\\n        emit Withdrawn(_to, nft.contractAddress, nft.tokenId);\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x89b5421a3b182d403f6cd6fd0870cbfc660f802a4b0cb537d1fa818ae6426c48\",\"license\":\"MIT\"},\"contracts/storages/TokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"../interfaces/ICryptoPawnToken.sol\\\";\\n\\ncontract TokenStorage {\\n    ICryptoPawnToken public cryptoPawnToken;\\n\\n    constructor(address _cryptoPawnToken) {\\n        require(_cryptoPawnToken != address(0), \\\"Invalid token address\\\");\\n        cryptoPawnToken = ICryptoPawnToken(_cryptoPawnToken);\\n    }\\n\\n    function _transferToken(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_from != address(0), \\\"Invalid sender address\\\");\\n        require(_to != address(0), \\\"Invalid receiver address\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(\\n            _amount <= 1000000,\\n            \\\"Amount must be less than or equal to 1 million\\\"\\n        );\\n        require(\\n            cryptoPawnToken.balanceOf(_from) >= _amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        require(\\n            cryptoPawnToken.allowance(_from, address(this)) >= _amount,\\n            \\\"Insufficient allowance\\\"\\n        );\\n\\n        cryptoPawnToken.transferFrom(_from, _to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3301e731063c28f509a6933f2eacb401ee24fd2936a89f26982c2a58223cca6e\",\"license\":\"MIT\"},\"contracts/structs/Mortgage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nimport \\\"../enums/MortgageState.sol\\\";\\n\\nstruct Mortgage {\\n    uint id;\\n    uint nftTokenId;\\n    uint principal;\\n    uint interest;\\n    uint duration;\\n    uint startTime;\\n    address lender;\\n    address borrower;\\n    address nftContract;\\n    MortgageState state;\\n}\\n\",\"keccak256\":\"0xc4897f6df297e5e31b0bf02de6bdfb04e5f76e5baeb07acfcbe16fdee292db68\",\"license\":\"MIT\"},\"contracts/structs/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.28;\\n\\nstruct NFT {\\n    address contractAddress;\\n    uint256 tokenId;\\n}\\n\",\"keccak256\":\"0x0ee2851fe373546f186510f50e6816ee7c6f3d0d0406da2b1ab186bca0bc1029\",\"license\":\"MIT\"},\"contracts/utils/RepayInterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {MulDiv} from \\\"../libraries/MulDiv.sol\\\";\\n\\ncontract RepayInterestCalculator {\\n    using MulDiv for uint256;\\n\\n    uint256 internal constant PERCENTAGE_DENOMINATOR = 100_00; // 100.00% (2 decimals)\\n\\n    /**\\n     * @notice Calculate the repay amount including interest\\n     * @param principal The loan principal amount\\n     * @param annualInterestRate Annual interest rate in basis points (e.g., 5% = 500)\\n     * @param durationInDays Duration of the loan in days\\n     * @return repayAmount Total amount to repay\\n     */\\n    function _calculateRepayAmount(\\n        uint256 principal,\\n        uint256 annualInterestRate,\\n        uint256 durationInDays\\n    ) internal pure returns (uint256 repayAmount) {\\n        // Convert annual interest rate to daily interest rate\\n        uint256 dailyInterestRate = annualInterestRate.mulDiv(1, 365); // Divide annual rate by 365 days\\n\\n        // Calculate the interest amount\\n        uint256 interestAmount = principal\\n            .mulDiv(dailyInterestRate, PERCENTAGE_DENOMINATOR)\\n            .mulDiv(durationInDays, 1);\\n\\n        // Total repay amount = principal + interest\\n        repayAmount = principal + interestAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x743c9cba14a2a072eb35333861b23d0d5cd943d8fd1624d2db45050230912312\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8148,
        "contract": "contracts/MortgageToken.sol:MortgageToken",
        "label": "mortgageId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8153,
        "contract": "contracts/MortgageToken.sol:MortgageToken",
        "label": "mortgageIdToMortgage",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Mortgage)8438_storage)"
      },
      {
        "astId": 8314,
        "contract": "contracts/MortgageToken.sol:MortgageToken",
        "label": "cryptoPawnToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICryptoPawnToken)7770"
      },
      {
        "astId": 8175,
        "contract": "contracts/MortgageToken.sol:MortgageToken",
        "label": "storedNFTs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(NFT)8445_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoPawnToken)7770": {
        "encoding": "inplace",
        "label": "contract ICryptoPawnToken",
        "numberOfBytes": "20"
      },
      "t_enum(MortgageState)7708": {
        "encoding": "inplace",
        "label": "enum MortgageState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Mortgage)8438_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Mortgage)",
        "numberOfBytes": "32",
        "value": "t_struct(Mortgage)8438_storage"
      },
      "t_mapping(t_uint256,t_struct(NFT)8445_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFT)",
        "numberOfBytes": "32",
        "value": "t_struct(NFT)8445_storage"
      },
      "t_struct(Mortgage)8438_storage": {
        "encoding": "inplace",
        "label": "struct Mortgage",
        "members": [
          {
            "astId": 8418,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8420,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8422,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "principal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8424,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "interest",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8426,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8428,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8430,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "lender",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 8432,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "borrower",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 8434,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "nftContract",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 8437,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "state",
            "offset": 20,
            "slot": "8",
            "type": "t_enum(MortgageState)7708"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(NFT)8445_storage": {
        "encoding": "inplace",
        "label": "struct NFT",
        "members": [
          {
            "astId": 8442,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8444,
            "contract": "contracts/MortgageToken.sol:MortgageToken",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}